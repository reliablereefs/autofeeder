#![allow(dead_code)]
use anyhow::{bail, Result};
use core::str;
use std::collections::HashMap;
use std::ops::DerefMut;
use embedded_svc::{http::Method, io::Write};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        prelude::*,
        gpio::{IOPin, PinDriver, Output, AnyIOPin},
    },
    http::server::{Configuration, EspHttpServer},
    sys::sleep,
};
use std::sync::{Arc, Mutex};
use wifi::wifi;
use serde::{Deserialize, Serialize};
use serde_json;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

#[derive(Serialize, Deserialize)]
pub struct DoseRequest {
    name: String,
    spin_time: u32,
    wait_time: u32,
    pump_time: u32,
}

#[derive(Clone)]
pub struct DoseDevice {
    name: String,
    stir_plate: Option<Arc<Mutex<PinDriver<'static, AnyIOPin, Output>>>>,
    pump: Arc<Mutex<PinDriver<'static, AnyIOPin, Output>>>,
}

fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sys_loop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sys_loop,
    ) {
        Ok(inner) => {
            println!("Connected to Wi-Fi network!");
            inner
        }
        Err(err) => {
            // Red!
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    // initialize the groups
    let mut devices: HashMap<String, DoseDevice> = HashMap::new();

    devices.insert("1".to_string(), DoseDevice {
        name: "1".to_string(),
        stir_plate: Some(Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio0.downgrade())?.into()))),
        pump: Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio1.downgrade())?.into())),
    });

    devices.insert("2".to_string(), DoseDevice {
        name: "2".to_string(),
        stir_plate: Some(Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio2.downgrade())?.into()))),
        pump: Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio3.downgrade())?.into())),
    });

    devices.insert("3".to_string(), DoseDevice {
        name: "3".to_string(),
        stir_plate: Some(Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio4.downgrade())?.into()))),
        pump: Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio5.downgrade())?.into())),
    });

    devices.insert("4".to_string(), DoseDevice {
        name: "4".to_string(),
        stir_plate: Some(Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio6.downgrade())?.into()))),
        pump: Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio7.downgrade())?.into())),
    });

    devices.insert("5".to_string(), DoseDevice {
        name: "5".to_string(),
        stir_plate: Some(Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio8.downgrade())?.into()))),
        pump: Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio9.downgrade())?.into())),
    });

    devices.insert("6".to_string(), DoseDevice {
        name: "6".to_string(),
        stir_plate: Some(Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio10.downgrade())?.into()))),
        pump: Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio11.downgrade())?.into())),
    });

    devices.insert("flush".to_string(), DoseDevice {
        name: "flush".to_string(),
        stir_plate: None,
        pump: Arc::new(Mutex::new(PinDriver::output(peripherals.pins.gpio18.downgrade())?.into())),
    });

    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;
    // http://<sta ip>/ handler
    server.fn_handler("/", Method::Get, |request| {
        let html = index_html();
        let mut response = request.into_ok_response()?;
        response.write_all(html.as_bytes())?;
        Ok(())
    })?;

    server.fn_handler("/health", Method::Get, move |request| {
        let resp = health();
        let mut response = request.into_ok_response()?;
        response.write_all(resp.as_bytes())?;
        Ok(())
    })?;

    server.fn_handler("/dose", Method::Post, move |mut request| {
        let mut buf: Vec<u8> = Vec::new();
        request.read(&mut buf)?;
        let dose_req: DoseRequest = serde_json::from_str(str::from_utf8(&buf).unwrap())?;
        drop(buf);

        match devices.get(&dose_req.name) {
            None => {
                request.into_response(404, Option::from("Device not found"), &[])?;
                Ok(())
            }
            Some(device) => {
                let mut response = request.into_ok_response()?;
                match device.clone().stir_plate {
                    None => unsafe {
                        let mut pump = device.pump.lock()?;
                        pump.deref_mut().set_high()?;
                        sleep(dose_req.pump_time);
                        pump.deref_mut().set_low()?;
                        response.write_all("Complete".as_bytes())?;
                        Ok(())
                    }
                    Some(stir_plate) => unsafe {
                        let mut spin = stir_plate.lock()?;
                        let mut pump = device.pump.lock()?;
                        spin.deref_mut().set_high()?;
                        sleep(dose_req.spin_time);
                        spin.deref_mut().set_low()?;
                        sleep(dose_req.wait_time);
                        pump.deref_mut().set_high()?;
                        sleep(dose_req.pump_time);
                        pump.deref_mut().set_low()?;
                        response.write_all("Complete".as_bytes())?;
                        Ok(())
                    }
                }
            }
        }
    })?;

    println!("Server awaiting connection");

    // Prevent program from exiting
    loop {
        unsafe { sleep(1000); }
    }
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from ESP32-C3!")
}

fn health() -> String {
    format!(
        r#"{{"status": "ok", "version": "{}"}}"#, env!("CARGO_PKG_VERSION")
    )
}